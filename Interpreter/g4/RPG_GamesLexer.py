# Generated from RPG_Games.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,251,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,4,25,
        220,8,25,11,25,12,25,221,1,26,1,26,5,26,226,8,26,10,26,12,26,229,
        9,26,1,27,4,27,232,8,27,11,27,12,27,233,1,28,1,28,5,28,238,8,28,
        10,28,12,28,241,9,28,1,28,1,28,1,29,4,29,246,8,29,11,29,12,29,247,
        1,29,1,29,0,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,5,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,10,10,
        13,13,34,34,3,0,9,10,13,13,32,32,255,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,63,1,0,0,0,5,65,1,
        0,0,0,7,67,1,0,0,0,9,72,1,0,0,0,11,77,1,0,0,0,13,84,1,0,0,0,15,89,
        1,0,0,0,17,96,1,0,0,0,19,105,1,0,0,0,21,118,1,0,0,0,23,126,1,0,0,
        0,25,131,1,0,0,0,27,137,1,0,0,0,29,141,1,0,0,0,31,147,1,0,0,0,33,
        156,1,0,0,0,35,164,1,0,0,0,37,177,1,0,0,0,39,180,1,0,0,0,41,186,
        1,0,0,0,43,192,1,0,0,0,45,196,1,0,0,0,47,204,1,0,0,0,49,211,1,0,
        0,0,51,219,1,0,0,0,53,223,1,0,0,0,55,231,1,0,0,0,57,235,1,0,0,0,
        59,245,1,0,0,0,61,62,5,40,0,0,62,2,1,0,0,0,63,64,5,44,0,0,64,4,1,
        0,0,0,65,66,5,41,0,0,66,6,1,0,0,0,67,68,5,83,0,0,68,69,5,65,0,0,
        69,70,5,86,0,0,70,71,5,69,0,0,71,8,1,0,0,0,72,73,5,76,0,0,73,74,
        5,79,0,0,74,75,5,65,0,0,75,76,5,68,0,0,76,10,1,0,0,0,77,78,5,83,
        0,0,78,79,5,85,0,0,79,80,5,77,0,0,80,81,5,77,0,0,81,82,5,79,0,0,
        82,83,5,78,0,0,83,12,1,0,0,0,84,85,5,80,0,0,85,86,5,79,0,0,86,87,
        5,79,0,0,87,88,5,70,0,0,88,14,1,0,0,0,89,90,5,65,0,0,90,91,5,81,
        0,0,91,92,5,85,0,0,92,93,5,73,0,0,93,94,5,82,0,0,94,95,5,69,0,0,
        95,16,1,0,0,0,96,97,5,65,0,0,97,98,5,76,0,0,98,99,5,84,0,0,99,100,
        5,69,0,0,100,101,5,82,0,0,101,102,5,65,0,0,102,103,5,84,0,0,103,
        104,5,69,0,0,104,18,1,0,0,0,105,106,5,87,0,0,106,107,5,104,0,0,107,
        108,5,97,0,0,108,109,5,116,0,0,109,110,5,115,0,0,110,111,5,73,0,
        0,111,112,5,110,0,0,112,113,5,77,0,0,113,114,5,121,0,0,114,115,5,
        66,0,0,115,116,5,97,0,0,116,117,5,103,0,0,117,20,1,0,0,0,118,119,
        5,83,0,0,119,120,5,85,0,0,120,121,5,77,0,0,121,122,5,77,0,0,122,
        123,5,65,0,0,123,124,5,87,0,0,124,125,5,89,0,0,125,22,1,0,0,0,126,
        127,5,82,0,0,127,128,5,79,0,0,128,129,5,76,0,0,129,130,5,76,0,0,
        130,24,1,0,0,0,131,132,5,115,0,0,132,133,5,119,0,0,133,134,5,111,
        0,0,134,135,5,114,0,0,135,136,5,100,0,0,136,26,1,0,0,0,137,138,5,
        98,0,0,138,139,5,111,0,0,139,140,5,119,0,0,140,28,1,0,0,0,141,142,
        5,115,0,0,142,143,5,116,0,0,143,144,5,97,0,0,144,145,5,102,0,0,145,
        146,5,102,0,0,146,30,1,0,0,0,147,148,5,115,0,0,148,149,5,116,0,0,
        149,150,5,114,0,0,150,151,5,101,0,0,151,152,5,110,0,0,152,153,5,
        103,0,0,153,154,5,116,0,0,154,155,5,104,0,0,155,32,1,0,0,0,156,157,
        5,97,0,0,157,158,5,103,0,0,158,159,5,105,0,0,159,160,5,108,0,0,160,
        161,5,105,0,0,161,162,5,116,0,0,162,163,5,121,0,0,163,34,1,0,0,0,
        164,165,5,105,0,0,165,166,5,110,0,0,166,167,5,116,0,0,167,168,5,
        101,0,0,168,169,5,108,0,0,169,170,5,108,0,0,170,171,5,105,0,0,171,
        172,5,103,0,0,172,173,5,101,0,0,173,174,5,110,0,0,174,175,5,99,0,
        0,175,176,5,101,0,0,176,36,1,0,0,0,177,178,5,104,0,0,178,179,5,112,
        0,0,179,38,1,0,0,0,180,181,5,68,0,0,181,182,5,119,0,0,182,183,5,
        97,0,0,183,184,5,114,0,0,184,185,5,102,0,0,185,40,1,0,0,0,186,187,
        5,72,0,0,187,188,5,117,0,0,188,189,5,109,0,0,189,190,5,97,0,0,190,
        191,5,110,0,0,191,42,1,0,0,0,192,193,5,69,0,0,193,194,5,108,0,0,
        194,195,5,102,0,0,195,44,1,0,0,0,196,197,5,80,0,0,197,198,5,97,0,
        0,198,199,5,108,0,0,199,200,5,97,0,0,200,201,5,100,0,0,201,202,5,
        105,0,0,202,203,5,110,0,0,203,46,1,0,0,0,204,205,5,87,0,0,205,206,
        5,105,0,0,206,207,5,122,0,0,207,208,5,97,0,0,208,209,5,114,0,0,209,
        210,5,100,0,0,210,48,1,0,0,0,211,212,5,82,0,0,212,213,5,97,0,0,213,
        214,5,110,0,0,214,215,5,103,0,0,215,216,5,101,0,0,216,217,5,114,
        0,0,217,50,1,0,0,0,218,220,7,0,0,0,219,218,1,0,0,0,220,221,1,0,0,
        0,221,219,1,0,0,0,221,222,1,0,0,0,222,52,1,0,0,0,223,227,7,0,0,0,
        224,226,7,1,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,
        227,228,1,0,0,0,228,54,1,0,0,0,229,227,1,0,0,0,230,232,7,2,0,0,231,
        230,1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,
        56,1,0,0,0,235,239,5,34,0,0,236,238,8,3,0,0,237,236,1,0,0,0,238,
        241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,242,1,0,0,0,241,
        239,1,0,0,0,242,243,5,34,0,0,243,58,1,0,0,0,244,246,7,4,0,0,245,
        244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,
        249,1,0,0,0,249,250,6,29,0,0,250,60,1,0,0,0,6,0,221,227,233,239,
        247,1,6,0,0
    ]

class RPG_GamesLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    CREATE = 6
    DEL = 7
    GET = 8
    UPDATE = 9
    PRINTINV = 10
    PRINTCAR = 11
    DICEROLL = 12
    SWORD = 13
    BOW = 14
    STAFF = 15
    STRENGTH = 16
    AGILITY = 17
    INTELLIGENCE = 18
    HP = 19
    DWARF = 20
    HUMAN = 21
    ELF = 22
    PALADIN = 23
    WIZARD = 24
    RANGER = 25
    NAME = 26
    ITEM = 27
    NUMBER = 28
    STRING = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'SAVE'", "'LOAD'", "'SUMMON'", "'POOF'", 
            "'AQUIRE'", "'ALTERATE'", "'WhatsInMyBag'", "'SUMMAWY'", "'ROLL'", 
            "'sword'", "'bow'", "'staff'", "'strength'", "'agility'", "'intelligence'", 
            "'hp'", "'Dwarf'", "'Human'", "'Elf'", "'Paladin'", "'Wizard'", 
            "'Ranger'" ]

    symbolicNames = [ "<INVALID>",
            "CREATE", "DEL", "GET", "UPDATE", "PRINTINV", "PRINTCAR", "DICEROLL", 
            "SWORD", "BOW", "STAFF", "STRENGTH", "AGILITY", "INTELLIGENCE", 
            "HP", "DWARF", "HUMAN", "ELF", "PALADIN", "WIZARD", "RANGER", 
            "NAME", "ITEM", "NUMBER", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "CREATE", "DEL", 
                  "GET", "UPDATE", "PRINTINV", "PRINTCAR", "DICEROLL", "SWORD", 
                  "BOW", "STAFF", "STRENGTH", "AGILITY", "INTELLIGENCE", 
                  "HP", "DWARF", "HUMAN", "ELF", "PALADIN", "WIZARD", "RANGER", 
                  "NAME", "ITEM", "NUMBER", "STRING", "WS" ]

    grammarFileName = "RPG_Games.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


