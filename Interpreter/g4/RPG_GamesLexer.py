# Generated from RPG_Games.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,226,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,4,23,204,8,23,11,23,12,23,
        205,1,24,1,24,5,24,210,8,24,10,24,12,24,213,9,24,1,25,4,25,216,8,
        25,11,25,12,25,217,1,26,4,26,221,8,26,11,26,12,26,222,1,26,1,26,
        0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,229,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,1,55,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,61,1,0,0,0,9,68,
        1,0,0,0,11,73,1,0,0,0,13,80,1,0,0,0,15,89,1,0,0,0,17,102,1,0,0,0,
        19,110,1,0,0,0,21,115,1,0,0,0,23,121,1,0,0,0,25,125,1,0,0,0,27,131,
        1,0,0,0,29,140,1,0,0,0,31,148,1,0,0,0,33,161,1,0,0,0,35,164,1,0,
        0,0,37,170,1,0,0,0,39,176,1,0,0,0,41,180,1,0,0,0,43,188,1,0,0,0,
        45,195,1,0,0,0,47,203,1,0,0,0,49,207,1,0,0,0,51,215,1,0,0,0,53,220,
        1,0,0,0,55,56,5,40,0,0,56,2,1,0,0,0,57,58,5,44,0,0,58,4,1,0,0,0,
        59,60,5,41,0,0,60,6,1,0,0,0,61,62,5,83,0,0,62,63,5,85,0,0,63,64,
        5,77,0,0,64,65,5,77,0,0,65,66,5,79,0,0,66,67,5,78,0,0,67,8,1,0,0,
        0,68,69,5,80,0,0,69,70,5,79,0,0,70,71,5,79,0,0,71,72,5,70,0,0,72,
        10,1,0,0,0,73,74,5,65,0,0,74,75,5,81,0,0,75,76,5,85,0,0,76,77,5,
        73,0,0,77,78,5,82,0,0,78,79,5,69,0,0,79,12,1,0,0,0,80,81,5,65,0,
        0,81,82,5,76,0,0,82,83,5,84,0,0,83,84,5,69,0,0,84,85,5,82,0,0,85,
        86,5,65,0,0,86,87,5,84,0,0,87,88,5,69,0,0,88,14,1,0,0,0,89,90,5,
        87,0,0,90,91,5,104,0,0,91,92,5,97,0,0,92,93,5,116,0,0,93,94,5,115,
        0,0,94,95,5,73,0,0,95,96,5,110,0,0,96,97,5,77,0,0,97,98,5,121,0,
        0,98,99,5,66,0,0,99,100,5,97,0,0,100,101,5,103,0,0,101,16,1,0,0,
        0,102,103,5,83,0,0,103,104,5,85,0,0,104,105,5,77,0,0,105,106,5,77,
        0,0,106,107,5,65,0,0,107,108,5,87,0,0,108,109,5,89,0,0,109,18,1,
        0,0,0,110,111,5,82,0,0,111,112,5,79,0,0,112,113,5,76,0,0,113,114,
        5,76,0,0,114,20,1,0,0,0,115,116,5,115,0,0,116,117,5,119,0,0,117,
        118,5,111,0,0,118,119,5,114,0,0,119,120,5,100,0,0,120,22,1,0,0,0,
        121,122,5,98,0,0,122,123,5,111,0,0,123,124,5,119,0,0,124,24,1,0,
        0,0,125,126,5,115,0,0,126,127,5,116,0,0,127,128,5,97,0,0,128,129,
        5,102,0,0,129,130,5,102,0,0,130,26,1,0,0,0,131,132,5,115,0,0,132,
        133,5,116,0,0,133,134,5,114,0,0,134,135,5,101,0,0,135,136,5,110,
        0,0,136,137,5,103,0,0,137,138,5,116,0,0,138,139,5,104,0,0,139,28,
        1,0,0,0,140,141,5,97,0,0,141,142,5,103,0,0,142,143,5,105,0,0,143,
        144,5,108,0,0,144,145,5,105,0,0,145,146,5,116,0,0,146,147,5,121,
        0,0,147,30,1,0,0,0,148,149,5,105,0,0,149,150,5,110,0,0,150,151,5,
        116,0,0,151,152,5,101,0,0,152,153,5,108,0,0,153,154,5,108,0,0,154,
        155,5,105,0,0,155,156,5,103,0,0,156,157,5,101,0,0,157,158,5,110,
        0,0,158,159,5,99,0,0,159,160,5,101,0,0,160,32,1,0,0,0,161,162,5,
        104,0,0,162,163,5,112,0,0,163,34,1,0,0,0,164,165,5,68,0,0,165,166,
        5,119,0,0,166,167,5,97,0,0,167,168,5,114,0,0,168,169,5,102,0,0,169,
        36,1,0,0,0,170,171,5,72,0,0,171,172,5,117,0,0,172,173,5,109,0,0,
        173,174,5,97,0,0,174,175,5,110,0,0,175,38,1,0,0,0,176,177,5,69,0,
        0,177,178,5,108,0,0,178,179,5,102,0,0,179,40,1,0,0,0,180,181,5,80,
        0,0,181,182,5,97,0,0,182,183,5,108,0,0,183,184,5,97,0,0,184,185,
        5,100,0,0,185,186,5,105,0,0,186,187,5,110,0,0,187,42,1,0,0,0,188,
        189,5,87,0,0,189,190,5,105,0,0,190,191,5,122,0,0,191,192,5,97,0,
        0,192,193,5,114,0,0,193,194,5,100,0,0,194,44,1,0,0,0,195,196,5,82,
        0,0,196,197,5,97,0,0,197,198,5,110,0,0,198,199,5,103,0,0,199,200,
        5,101,0,0,200,201,5,114,0,0,201,46,1,0,0,0,202,204,7,0,0,0,203,202,
        1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,48,1,
        0,0,0,207,211,7,0,0,0,208,210,7,1,0,0,209,208,1,0,0,0,210,213,1,
        0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,50,1,0,0,0,213,211,1,0,
        0,0,214,216,7,2,0,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,0,
        0,0,217,218,1,0,0,0,218,52,1,0,0,0,219,221,7,3,0,0,220,219,1,0,0,
        0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,
        0,224,225,6,26,0,0,225,54,1,0,0,0,5,0,205,211,217,222,1,6,0,0
    ]

class RPG_GamesLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    CREATE = 4
    DEL = 5
    GET = 6
    UPDATE = 7
    PRINTINV = 8
    PRINTCAR = 9
    DICEROLL = 10
    SWORD = 11
    BOW = 12
    STAFF = 13
    STRENGTH = 14
    AGILITY = 15
    INTELLIGENCE = 16
    HP = 17
    DWARF = 18
    HUMAN = 19
    ELF = 20
    PALADIN = 21
    WIZARD = 22
    RANGER = 23
    NAME = 24
    ITEM = 25
    NUMBER = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'SUMMON'", "'POOF'", "'AQUIRE'", "'ALTERATE'", 
            "'WhatsInMyBag'", "'SUMMAWY'", "'ROLL'", "'sword'", "'bow'", 
            "'staff'", "'strength'", "'agility'", "'intelligence'", "'hp'", 
            "'Dwarf'", "'Human'", "'Elf'", "'Paladin'", "'Wizard'", "'Ranger'" ]

    symbolicNames = [ "<INVALID>",
            "CREATE", "DEL", "GET", "UPDATE", "PRINTINV", "PRINTCAR", "DICEROLL", 
            "SWORD", "BOW", "STAFF", "STRENGTH", "AGILITY", "INTELLIGENCE", 
            "HP", "DWARF", "HUMAN", "ELF", "PALADIN", "WIZARD", "RANGER", 
            "NAME", "ITEM", "NUMBER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "CREATE", "DEL", "GET", "UPDATE", 
                  "PRINTINV", "PRINTCAR", "DICEROLL", "SWORD", "BOW", "STAFF", 
                  "STRENGTH", "AGILITY", "INTELLIGENCE", "HP", "DWARF", 
                  "HUMAN", "ELF", "PALADIN", "WIZARD", "RANGER", "NAME", 
                  "ITEM", "NUMBER", "WS" ]

    grammarFileName = "RPG_Games.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


